<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_generic_flow" kind="class" language="C++" prot="public">
    <compoundname>GenericFlow</compoundname>
    <basecompoundref refid="class_flow" prot="public" virt="non-virtual">Flow</basecompoundref>
    <includes refid="_generic_flow_8h" local="no">GenericFlow.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_generic_flow_1a6963b91b082157c84ef967e7aa6a2fab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GenericFlow::updateKey</definition>
        <argsstring>(std::string &amp;key_s, std::string &amp;key_d, Crafter::IP *packet)</argsstring>
        <name>updateKey</name>
        <param>
          <type>std::string &amp;</type>
          <declname>key_s</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>key_d</declname>
        </param>
        <param>
          <type>Crafter::IP *</type>
          <declname>packet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Class representing a <ref refid="class_generic_flow" kindref="compound">GenericFlow</ref> of information. It does not consider any facts related to connection oriented protocols. Generates keys considering first byte pair [0,1] as sport and the second one [2,3] as dport. Updates content of strings given as parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>std::string</parametername>
</parameternamelist>
<parameterdescription>
<para>&amp; key source direct multiplexing key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::string</parametername>
</parameternamelist>
<parameterdescription>
<para>&amp; key destination opposite multiplexing key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Crafter::IP*</parametername>
</parameternamelist>
<parameterdescription>
<para>packet packet to take data from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xshell/git/RehtSe/include/flows/GenericFlow.h" line="47" column="1" bodyfile="/home/xshell/git/RehtSe/src/flows/GenericFlow.cpp" bodystart="57" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_generic_flow_1a64cffa198c737d3e5fd3da43d6a6a0af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GenericFlow::GenericFlow</definition>
        <argsstring>(std::string)</argsstring>
        <name>GenericFlow</name>
        <param>
          <type>std::string</type>
          <defname>key</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an instance from the key provided. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>std::string</parametername>
</parameternamelist>
<parameterdescription>
<para>key identifying this flow. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xshell/git/RehtSe/include/flows/GenericFlow.h" line="52" column="1" bodyfile="/home/xshell/git/RehtSe/src/flows/GenericFlow.cpp" bodystart="28" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_flow_1ae2d0e2664aa8c7196450093be73ae61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>GenericFlow::~GenericFlow</definition>
        <argsstring>()</argsstring>
        <name>~GenericFlow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xshell/git/RehtSe/include/flows/GenericFlow.h" line="53" column="1" bodyfile="/home/xshell/git/RehtSe/src/flows/GenericFlow.cpp" bodystart="31" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_flow_1a5c859935f4af3f4fd2754be1c31086c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool GenericFlow::handlePacket</definition>
        <argsstring>(Crafter::Packet *)</argsstring>
        <name>handlePacket</name>
        <reimplements refid="class_flow_1aabcb243e3a9c04c1eb9b1090a3520544">handlePacket</reimplements>
        <param>
          <type>Crafter::Packet *</type>
          <defname>packet</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implements the most generic modification flow. If matches, then change and dispatch. FixME:¿¿¿The flow is marked as modified and further packets will be crafted again anyway. ??? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Crafter::Packet*</parametername>
</parameternamelist>
<parameterdescription>
<para>to be handled. This object may be modified. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool. True if packet was modified. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xshell/git/RehtSe/include/flows/GenericFlow.h" line="62" column="1" bodyfile="/home/xshell/git/RehtSe/src/flows/GenericFlow.cpp" bodystart="34" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="7">
        <label>Flow</label>
        <link refid="class_flow"/>
      </node>
      <node id="6">
        <label>GenericFlow</label>
        <link refid="class_generic_flow"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>Flow</label>
        <link refid="class_flow"/>
        <childnode refid="9" relation="usage">
          <edgelabel>brother</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>GenericFlow</label>
        <link refid="class_generic_flow"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/xshell/git/RehtSe/include/flows/GenericFlow.h" line="33" column="1" bodyfile="/home/xshell/git/RehtSe/include/flows/GenericFlow.h" bodystart="33" bodyend="64"/>
    <listofallmembers>
      <member refid="class_flow_1aa8076d1b48c6de5c736bc64164d15320" prot="protected" virt="non-virtual"><scope>GenericFlow</scope><name>brother</name></member>
      <member refid="class_flow_1af268e1b04298b6c2e123a5112fb3206f" prot="protected" virt="non-virtual"><scope>GenericFlow</scope><name>Flow</name></member>
      <member refid="class_generic_flow_1a64cffa198c737d3e5fd3da43d6a6a0af" prot="public" virt="non-virtual"><scope>GenericFlow</scope><name>GenericFlow</name></member>
      <member refid="class_flow_1a30c028250e76e2c76837b19791185733" prot="public" virt="non-virtual"><scope>GenericFlow</scope><name>getBrother</name></member>
      <member refid="class_generic_flow_1a5c859935f4af3f4fd2754be1c31086c8" prot="public" virt="virtual"><scope>GenericFlow</scope><name>handlePacket</name></member>
      <member refid="class_flow_1a52567a3ca729f427bf869efb594723d6" prot="protected" virt="non-virtual"><scope>GenericFlow</scope><name>key</name></member>
      <member refid="class_flow_1a46a48b06f94913c9d3ea42ca16b14794" prot="public" virt="non-virtual"><scope>GenericFlow</scope><name>makeFlow</name></member>
      <member refid="class_flow_1aa3e211d010942314d8811879bb87e191" prot="public" virt="non-virtual"><scope>GenericFlow</scope><name>makeFlowPair</name></member>
      <member refid="class_flow_1ae5faa5bcc061f892714082b3dc199408" prot="protected" virt="non-virtual"><scope>GenericFlow</scope><name>modified</name></member>
      <member refid="class_flow_1ac41cf6542a8ef14cae38ed131d34dbb9" prot="public" virt="non-virtual"><scope>GenericFlow</scope><name>setBrother</name></member>
      <member refid="class_generic_flow_1a6963b91b082157c84ef967e7aa6a2fab" prot="public" virt="non-virtual"><scope>GenericFlow</scope><name>updateKey</name></member>
      <member refid="class_flow_1a5991efa6e8cf88c4ef2125cc727db333" prot="public" virt="virtual"><scope>GenericFlow</scope><name>~Flow</name></member>
      <member refid="class_generic_flow_1ae2d0e2664aa8c7196450093be73ae61a" prot="public" virt="virtual"><scope>GenericFlow</scope><name>~GenericFlow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
