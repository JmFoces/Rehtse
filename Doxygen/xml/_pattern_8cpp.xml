<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_pattern_8cpp" kind="file" language="C++">
    <compoundname>Pattern.cpp</compoundname>
    <includes refid="_pattern_8h" local="no">pattern/Pattern.h</includes>
    <incdepgraph>
      <node id="629">
        <label>pcap.h</label>
      </node>
      <node id="623">
        <label>boost/log/core.hpp</label>
      </node>
      <node id="633">
        <label>boost/format.hpp</label>
      </node>
      <node id="622">
        <label>string</label>
      </node>
      <node id="635">
        <label>map</label>
      </node>
      <node id="624">
        <label>boost/log/trivial.hpp</label>
      </node>
      <node id="625">
        <label>boost/log/expressions.hpp</label>
      </node>
      <node id="637">
        <label>net/if_arp.h</label>
      </node>
      <node id="631">
        <label>boost/asio.hpp</label>
      </node>
      <node id="638">
        <label>netinet/if_ether.h</label>
      </node>
      <node id="619">
        <label>/home/xshell/git/RehtSe/src/pattern/Pattern.cpp</label>
        <link refid="Pattern.cpp"/>
        <childnode refid="620" relation="include">
        </childnode>
      </node>
      <node id="620">
        <label>pattern/Pattern.h</label>
        <link refid="_pattern_8h"/>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="624" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
        <childnode refid="627" relation="include">
        </childnode>
        <childnode refid="628" relation="include">
        </childnode>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="630" relation="include">
        </childnode>
        <childnode refid="639" relation="include">
        </childnode>
      </node>
      <node id="626">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="621">
        <label>iostream</label>
      </node>
      <node id="636">
        <label>net/ethernet.h</label>
      </node>
      <node id="632">
        <label>boost/bind.hpp</label>
      </node>
      <node id="627">
        <label>boost/regex.hpp</label>
      </node>
      <node id="630">
        <label>misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="631" relation="include">
        </childnode>
        <childnode refid="632" relation="include">
        </childnode>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="635" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="637" relation="include">
        </childnode>
        <childnode refid="638" relation="include">
        </childnode>
      </node>
      <node id="634">
        <label>set</label>
      </node>
      <node id="639">
        <label>err.h</label>
        <link refid="err_8h"/>
      </node>
      <node id="628">
        <label>crafter.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2016,<sp/>José<sp/>María<sp/>Foces<sp/>Vivancos</highlight></codeline>
<codeline lineno="3"><highlight class="comment">All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="5"><highlight class="comment">modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>&lt;organization&gt;<sp/>nor<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="15"><highlight class="comment">ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="16"><highlight class="comment">WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="17"><highlight class="comment">DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>ESTEBAN<sp/>PELLEGRINO<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY</highlight></codeline>
<codeline lineno="18"><highlight class="comment">DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="19"><highlight class="comment">(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="20"><highlight class="comment">LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="21"><highlight class="comment">ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="22"><highlight class="comment">(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="23"><highlight class="comment">SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="24"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_pattern_8h" kindref="compound">pattern/Pattern.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="class_pattern_1a7d6f58ea6e73e4b79a7f722a59ce64af" refkind="member"><highlight class="normal"><ref refid="class_pattern_1a7d6f58ea6e73e4b79a7f722a59ce64af" kindref="member">Pattern::Pattern</ref>(std::string<sp/>bpf,std::string<sp/>regex,std::string<sp/>replacement_regex,<sp/>std::string<sp/>raw_replacement):</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>bpf_string(bpf),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>regex(regex),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>replacement_regex(replacement_regex),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>raw_replacement(raw_replacement){</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>init_pcap_bpf();</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Pattern::init_pcap_bpf(){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pcap<sp/>=<sp/>pcap_open_dead(DLT_EN10MB,65535);//Allocs<sp/>mem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>pcap<sp/>=<sp/>pcap_open_dead(DLT_RAW,65535);</highlight><highlight class="comment">//Allocs<sp/>mem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>bpf_compiled<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bpf_program*<sp/>)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bpf_program));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pcap_compile(pcap,bpf_compiled,bpf_string.c_str(),0,PCAP_NETMASK_UNKNOWN)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(error)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>compiling<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pcap_geterr(pcap);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(error)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>compile<sp/>BPF<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>bpf_string;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BPF_ERR;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47" refid="class_pattern_1ae0acce75099bf7776feab7d86f34e21f" refkind="member"><highlight class="normal"><ref refid="class_pattern_1a7d6f58ea6e73e4b79a7f722a59ce64af" kindref="member">Pattern::Pattern</ref>(boost::property_tree::ptree<sp/>ptree)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>match<sp/>=<sp/>ptree.get_child(<ref refid="misc_8h_1abee3879c3423745f91f3889639d58709" kindref="member">CONF_KEY_MATCH</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>replacement<sp/>=<sp/>ptree.get_child(<ref refid="misc_8h_1ab56c159876f6acd54ea5297d5a003c6d" kindref="member">CONF_KEY_REPLACEMENT</ref>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>bpf_string<sp/>=<sp/>match.get_child(<ref refid="misc_8h_1a72f2f4f65d0b3d6110cf79a17359747e" kindref="member">CONF_KEY_BPF</ref>).data();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>regex<sp/>=<sp/>boost::regex(match.get_child(<ref refid="misc_8h_1abf3449c5c0efb6b896555f1e3e651d21" kindref="member">CONF_KEY_REGEX</ref>).data());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>replacement_regex<sp/>=<sp/>boost::regex(replacement.get_child(<ref refid="misc_8h_1abf3449c5c0efb6b896555f1e3e651d21" kindref="member">CONF_KEY_REGEX</ref>).data());</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>raw_replacement<sp/>=<sp/>replacement.get_child(<ref refid="misc_8h_1ab56c159876f6acd54ea5297d5a003c6d" kindref="member">CONF_KEY_REPLACEMENT</ref>).data();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>init_pcap_bpf();</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56" refid="class_pattern_1a6e8b9388bbd39934e9f9534b974d7498" refkind="member"><highlight class="normal"><ref refid="class_pattern_1a6e8b9388bbd39934e9f9534b974d7498" kindref="member">Pattern::~Pattern</ref>()<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bpf_compiled;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>pcap_close(pcap);</highlight><highlight class="comment">//Releases<sp/>mem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="class_pattern_1a9b89524b05dc9430bd479928d4c08a4d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_pattern_1a9b89524b05dc9430bd479928d4c08a4d" kindref="member">Pattern::check</ref>(Crafter::Packet<sp/>*packet){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(debug)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Pattern&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_pattern_1af1563aeb5e7bb378e810267da623906e" kindref="member">print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;checking<sp/>packet...&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret_value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>packet-&gt;GetSize();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>raw_packet=<sp/>(uint8_t*)<sp/>malloc(</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>packet-&gt;GetData(raw_packet);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(trace)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PACKET<sp/>DATA&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/><ref refid="misc_8h_1aee1c18572400116715202d5df122941d" kindref="member">hexa_print</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>)<sp/>raw_packet,<sp/>size);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*uint32_t<sp/>bpf_exec_result<sp/>=<sp/>bpf_filter(<sp/>//if<sp/>0<sp/>then<sp/><sp/>matches</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bpf_compiled-&gt;bf_insns,</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned<sp/>char*)<sp/>raw_packet,</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/>);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>pcap_pkthdr<sp/>pkt_hdr;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>pkt_hdr.caplen<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>pkt_hdr.len<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bpf_exec_result<sp/>=<sp/>pcap_offline_filter(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bpf_compiled,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;pkt_hdr,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_packet</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(trace)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BPF<sp/>Program<sp/>exit<sp/>code:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bpf_exec_result;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>raw_pack_str((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)raw_packet,size);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bpf_exec_result<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(debug)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BPF<sp/>Match<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>bpf_string;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret_value<sp/>=<sp/><ref refid="misc_8h_1af14f80c6b321f2805138e03b832c9091" kindref="member">match_regex</ref>(raw_pack_str,regex);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret_value)BOOST_LOG_TRIVIAL(info)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Pattern&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_pattern_1af1563aeb5e7bb378e810267da623906e" kindref="member">print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Matched!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret_value;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="class_pattern_1ac18d670fe54682f7fc6e3da229988ca0" refkind="member"><highlight class="normal">int32_t<sp/><ref refid="class_pattern_1ac18d670fe54682f7fc6e3da229988ca0" kindref="member">Pattern::applyReplacement</ref>(Crafter::Layer<sp/>*layer){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(debug)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Pattern&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_pattern_1af1563aeb5e7bb378e810267da623906e" kindref="member">print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Updating<sp/>packet<sp/>contents...&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>payload<sp/>=<sp/>layer-&gt;GetStringPayload();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>t(std::ios::out<sp/>|<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;char,<sp/>char&gt;<sp/>oi(t);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(trace)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BASE<sp/>PAYLOAD<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="misc_8h_1aee1c18572400116715202d5df122941d" kindref="member">hexa_print</ref>(payload.c_str(),payload.size());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//boost::regex_replace(oi,<sp/>payload.begin(),payload.end(),regex,<sp/>format,<sp/>boost::match_default<sp/>|<sp/>boost::format_all);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>payload_mod<sp/>=<sp/><sp/>boost::regex_replace(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>payload,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacement_regex,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_replacement,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::match_default<sp/>|<sp/>boost::format_first_only</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>layer-&gt;SetPayload((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)payload_mod.c_str(),payload_mod.size());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(trace)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Payload<sp/>mod<sp/>PAYLOAD<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="misc_8h_1aee1c18572400116715202d5df122941d" kindref="member">hexa_print</ref>(layer-&gt;GetStringPayload().c_str(),layer-&gt;GetStringPayload().size());</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(payload<sp/>!=<sp/>payload_mod)<sp/>BOOST_LOG_TRIVIAL(info)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Pattern&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_pattern_1af1563aeb5e7bb378e810267da623906e" kindref="member">print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Updated<sp/>packet<sp/>content&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(payload_mod.size()<sp/>-<sp/>payload.size());</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/xshell/git/RehtSe/src/pattern/Pattern.cpp"/>
  </compounddef>
</doxygen>
