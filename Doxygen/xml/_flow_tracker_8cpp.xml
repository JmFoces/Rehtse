<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_flow_tracker_8cpp" kind="file" language="C++">
    <compoundname>FlowTracker.cpp</compoundname>
    <includes refid="_flow_tracker_8h" local="no">flows/FlowTracker.h</includes>
    <includes refid="_t_c_p_flow_8h" local="no">flows/TCPFlow.h</includes>
    <incdepgraph>
      <node id="434">
        <label>arpa/inet.h</label>
      </node>
      <node id="430">
        <label>iterator</label>
      </node>
      <node id="453">
        <label>pcap.h</label>
      </node>
      <node id="435">
        <label>boost/log/core.hpp</label>
      </node>
      <node id="441">
        <label>boost/format.hpp</label>
      </node>
      <node id="425">
        <label>cassert</label>
      </node>
      <node id="433">
        <label>flows/Flow.h</label>
        <link refid="_flow_8h"/>
        <childnode refid="434" relation="include">
        </childnode>
        <childnode refid="423" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="438" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
      </node>
      <node id="449">
        <label>pattern/Scanner.h</label>
        <link refid="_scanner_8h"/>
        <childnode refid="450" relation="include">
        </childnode>
        <childnode refid="451" relation="include">
        </childnode>
      </node>
      <node id="426">
        <label>string</label>
      </node>
      <node id="431">
        <label>radix_tree_node.hpp</label>
        <link refid="radix__tree__node_8hpp"/>
        <childnode refid="432" relation="include">
        </childnode>
      </node>
      <node id="432">
        <label>map</label>
      </node>
      <node id="448">
        <label>flows/TCPFlow.h</label>
        <link refid="_t_c_p_flow_8h"/>
        <childnode refid="433" relation="include">
        </childnode>
        <childnode refid="449" relation="include">
        </childnode>
      </node>
      <node id="436">
        <label>boost/log/trivial.hpp</label>
      </node>
      <node id="424">
        <label>radix_tree.hpp</label>
        <link refid="radix__tree_8hpp"/>
        <childnode refid="425" relation="include">
        </childnode>
        <childnode refid="426" relation="include">
        </childnode>
        <childnode refid="427" relation="include">
        </childnode>
        <childnode refid="428" relation="include">
        </childnode>
        <childnode refid="429" relation="include">
        </childnode>
        <childnode refid="431" relation="include">
        </childnode>
      </node>
      <node id="437">
        <label>boost/log/expressions.hpp</label>
      </node>
      <node id="445">
        <label>net/if_arp.h</label>
      </node>
      <node id="439">
        <label>boost/asio.hpp</label>
      </node>
      <node id="446">
        <label>netinet/if_ether.h</label>
      </node>
      <node id="429">
        <label>radix_tree_it.hpp</label>
        <link refid="radix__tree__it_8hpp"/>
        <childnode refid="430" relation="include">
        </childnode>
      </node>
      <node id="428">
        <label>vector</label>
      </node>
      <node id="451">
        <label>pattern/Pattern.h</label>
        <link refid="_pattern_8h"/>
        <childnode refid="442" relation="include">
        </childnode>
        <childnode refid="426" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="452" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
        <childnode refid="423" relation="include">
        </childnode>
        <childnode refid="453" relation="include">
        </childnode>
        <childnode refid="438" relation="include">
        </childnode>
        <childnode refid="454" relation="include">
        </childnode>
      </node>
      <node id="422">
        <label>flows/FlowTracker.h</label>
        <link refid="_flow_tracker_8h"/>
        <childnode refid="423" relation="include">
        </childnode>
        <childnode refid="424" relation="include">
        </childnode>
        <childnode refid="433" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="438" relation="include">
        </childnode>
      </node>
      <node id="421">
        <label>/home/xshell/git/RehtSe/src/flows/FlowTracker.cpp</label>
        <link refid="FlowTracker.cpp"/>
        <childnode refid="422" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
      </node>
      <node id="427">
        <label>utility</label>
      </node>
      <node id="452">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="442">
        <label>iostream</label>
      </node>
      <node id="450">
        <label>cstddef</label>
      </node>
      <node id="444">
        <label>net/ethernet.h</label>
      </node>
      <node id="440">
        <label>boost/bind.hpp</label>
      </node>
      <node id="447">
        <label>boost/regex.hpp</label>
      </node>
      <node id="438">
        <label>misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="439" relation="include">
        </childnode>
        <childnode refid="440" relation="include">
        </childnode>
        <childnode refid="441" relation="include">
        </childnode>
        <childnode refid="442" relation="include">
        </childnode>
        <childnode refid="443" relation="include">
        </childnode>
        <childnode refid="432" relation="include">
        </childnode>
        <childnode refid="426" relation="include">
        </childnode>
        <childnode refid="444" relation="include">
        </childnode>
        <childnode refid="445" relation="include">
        </childnode>
        <childnode refid="446" relation="include">
        </childnode>
      </node>
      <node id="443">
        <label>set</label>
      </node>
      <node id="454">
        <label>err.h</label>
        <link refid="err_8h"/>
      </node>
      <node id="423">
        <label>crafter.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2016,<sp/>José<sp/>María<sp/>Foces<sp/>Vivancos</highlight></codeline>
<codeline lineno="3"><highlight class="comment">All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="5"><highlight class="comment">modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>&lt;organization&gt;<sp/>nor<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="15"><highlight class="comment">ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="16"><highlight class="comment">WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="17"><highlight class="comment">DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>ESTEBAN<sp/>PELLEGRINO<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY</highlight></codeline>
<codeline lineno="18"><highlight class="comment">DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="19"><highlight class="comment">(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="20"><highlight class="comment">LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="21"><highlight class="comment">ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="22"><highlight class="comment">(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="23"><highlight class="comment">SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="24"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_flow_tracker_8h" kindref="compound">flows/FlowTracker.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_t_c_p_flow_8h" kindref="compound">flows/TCPFlow.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="class_flow_tracker" kindref="compound">FlowTracker</ref>*<sp/>FlowTracker::single_ptr=NULL;</highlight></codeline>
<codeline lineno="30" refid="class_flow_tracker_1ad0202e9012b222ffb96eb3c108949053" refkind="member"><highlight class="normal"><ref refid="class_flow_tracker" kindref="compound">FlowTracker</ref>*<sp/><ref refid="class_flow_tracker_1ad0202e9012b222ffb96eb3c108949053" kindref="member">FlowTracker::instance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FlowTracker::single_ptr<sp/>==<sp/>NULL)<sp/>single_ptr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_flow_tracker" kindref="compound">FlowTracker</ref>();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>single_ptr;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">FlowTracker::FlowTracker()<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="class_flow_tracker_1a439064075c7143f0bbe90183f20d7213" refkind="member"><highlight class="normal"><ref refid="class_flow_tracker_1a439064075c7143f0bbe90183f20d7213" kindref="member">FlowTracker::~FlowTracker</ref>()<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="class_flow_tracker_1a65f7a0712c4ed35bb1ed2b7ea832c61c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_flow_tracker_1a65f7a0712c4ed35bb1ed2b7ea832c61c" kindref="member">FlowTracker::traverse</ref>(){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree" kindref="compound">radix_tree&lt;std::string, Flow*&gt;::iterator</ref><sp/>it;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(trace)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;traverse:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>peer_tree.<ref refid="classradix__tree_1a21d97262afed8dc8bed0d1f1059a9c5e" kindref="member">begin</ref>();<sp/>it<sp/>!=<sp/>peer_tree.<ref refid="classradix__tree_1ae4f5d38cb6294fbf194eea9083fb653c" kindref="member">end</ref>();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(trace)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="misc_8h_1aee1c18572400116715202d5df122941d" kindref="member">hexa_print</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)it-&gt;first.c_str(),4)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>it-&gt;second</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="class_flow_tracker_1a8209b693ab5ad12ef22f6793f4f98deb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_flow_tracker_1a8209b693ab5ad12ef22f6793f4f98deb" kindref="member">FlowTracker::handlePacket</ref>(Crafter::Packet<sp/>*packet){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>Crafter::IP*<sp/>ip_layer<sp/>=<sp/>(Crafter::IP*)packet-&gt;operator<sp/>[](0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(trace)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Handling<sp/>packet&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;std::string,std::string&gt;<sp/>key_pair<sp/>=<sp/><ref refid="class_flow_tracker_1a3f379f0ef44c9b1af4e83ca67952938b" kindref="member">buildFlowKey</ref>(</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip_layer</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_flow" kindref="compound">Flow</ref>*<sp/>packet_flow<sp/>=<sp/><ref refid="class_flow_tracker_1a4ca33cbd3d000f5378743e23bbe64b20" kindref="member">getFlow</ref>(key_pair.first,key_pair.second);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>packet_flow-&gt;<ref refid="class_flow_1aabcb243e3a9c04c1eb9b1090a3520544" kindref="member">handlePacket</ref>(packet);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="class_flow_tracker_1a4ca33cbd3d000f5378743e23bbe64b20" refkind="member"><highlight class="normal"><ref refid="class_flow" kindref="compound">Flow</ref>*<sp/><ref refid="class_flow_tracker_1a4ca33cbd3d000f5378743e23bbe64b20" kindref="member">FlowTracker::getFlow</ref>(std::string<sp/>key,std::string<sp/>brother_key){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(debug)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Flow<sp/>Tracker<sp/>access<sp/>with<sp/>key<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="misc_8h_1aee1c18572400116715202d5df122941d" kindref="member">hexa_print</ref>(key.c_str(),key.size());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree" kindref="compound">radix_tree&lt;std::string, Flow*&gt;::iterator</ref><sp/>it;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>peer_tree.<ref refid="classradix__tree_1ac81a340d1ba443a074dfcb6cd94e10ae" kindref="member">find</ref>(key);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_flow" kindref="compound">Flow</ref>*<sp/>flow<sp/>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>found_key;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(peer_tree.<ref refid="classradix__tree_1ae4f5d38cb6294fbf194eea9083fb653c" kindref="member">end</ref>()!=it<sp/>){</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(debug)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Flow<sp/>Tracked<sp/>already<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found_key<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flow=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(debug)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;New<sp/>Flow<sp/>to<sp/>track<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;Flow*,Flow*&gt;*<sp/>flowptr_pair<sp/>=<sp/><ref refid="class_flow_1aa3e211d010942314d8811879bb87e191" kindref="member">Flow::makeFlowPair</ref>((uint8_t)key[8],key,brother_key);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peer_tree[key]=flowptr_pair-&gt;first;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peer_tree[brother_key]=flowptr_pair-&gt;second;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flow<sp/>=<sp/>flowptr_pair-&gt;first;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>flowptr_pair;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flow;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="class_flow_tracker_1a3f379f0ef44c9b1af4e83ca67952938b" refkind="member"><highlight class="normal">std::pair&lt;std::string,std::string&gt;<sp/><ref refid="class_flow_tracker_1a3f379f0ef44c9b1af4e83ca67952938b" kindref="member">FlowTracker::buildFlowKey</ref>(Crafter::IP*<sp/>packet){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>key_s;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>key_d;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(trace)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Building<sp/>access<sp/>keys&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>s_ip<sp/>=<sp/><sp/>packet-&gt;GetRawSourceIP();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>d_ip<sp/>=<sp/><sp/>packet-&gt;GetRawDestinationIP();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>key_s.append((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)s_ip,<sp/>4);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>key_s.append((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)d_ip,<sp/>4);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>key_d.append((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)d_ip,4);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>key_d.append((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)s_ip,4);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>protocol<sp/>=<sp/>(char)packet-&gt;GetProtocol();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>key_s.append((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>&amp;protocol,1);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>key_d.append((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>&amp;protocol,1);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>protocol<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IPPROTO_TCP:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_t_c_p_flow_1acebd32b83a41150d51c1fb0bd4d0dacf" kindref="member">TCPFlow::updateKey</ref>(key_s,key_d,packet);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>IPPROTO_ICMP:</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(trace)<sp/>&lt;&lt;<sp/>&quot;ICMP&quot;;</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Crafter::ICMP<sp/>*icmp_layer;</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>icmp_layer=<sp/>(Crafter::ICMP*)packet-&gt;GetTopLayer();</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>icmp_id;</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>icmp_id<sp/>=<sp/>icmp_layer-&gt;GetIdentifier();</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_s.append((char*)<sp/>&amp;icmp_id,2);</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_d.append((char*)<sp/>&amp;icmp_id,2);</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(info)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>proto&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(trace)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Got<sp/>key_S<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="misc_8h_1aee1c18572400116715202d5df122941d" kindref="member">hexa_print</ref>(key_s.c_str(),key_s.size());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_LOG_TRIVIAL(trace)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Got<sp/>key_D<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="misc_8h_1aee1c18572400116715202d5df122941d" kindref="member">hexa_print</ref>(key_d.c_str(),key_s.size());</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pair&lt;std::string,std::string&gt;(key_s,key_d);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/xshell/git/RehtSe/src/flows/FlowTracker.cpp"/>
  </compounddef>
</doxygen>
