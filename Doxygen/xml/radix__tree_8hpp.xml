<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="radix__tree_8hpp" kind="file" language="C++">
    <compoundname>radix_tree.hpp</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="radix__tree__it_8hpp" local="yes">radix_tree_it.hpp</includes>
    <includes refid="radix__tree__node_8hpp" local="yes">radix_tree_node.hpp</includes>
    <includedby refid="_flow_tracker_8h" local="no">/home/xshell/git/RehtSe/include/flows/FlowTracker.h</includedby>
    <includedby refid="_user_interface_8h" local="no">/home/xshell/git/RehtSe/include/UserInterface.h</includedby>
    <incdepgraph>
      <node id="305">
        <label>iterator</label>
      </node>
      <node id="300">
        <label>cassert</label>
      </node>
      <node id="301">
        <label>string</label>
      </node>
      <node id="306">
        <label>radix_tree_node.hpp</label>
        <link refid="radix__tree__node_8hpp"/>
        <childnode refid="307" relation="include">
        </childnode>
      </node>
      <node id="307">
        <label>map</label>
      </node>
      <node id="299">
        <label>/home/xshell/git/RehtSe/include/radix_tree.hpp</label>
        <link refid="radix_tree.hpp"/>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="304">
        <label>radix_tree_it.hpp</label>
        <link refid="radix__tree__it_8hpp"/>
        <childnode refid="305" relation="include">
        </childnode>
      </node>
      <node id="303">
        <label>vector</label>
      </node>
      <node id="302">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="311">
        <label>/home/xshell/git/RehtSe/include/UserInterface.h</label>
        <link refid="_user_interface_8h"/>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
      </node>
      <node id="310">
        <label>/home/xshell/git/RehtSe/include/NFQueue.h</label>
        <link refid="_n_f_queue_8h"/>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
      </node>
      <node id="313">
        <label>/home/xshell/git/RehtSe/src/UserInterface.cpp</label>
        <link refid="_user_interface_8cpp"/>
      </node>
      <node id="308">
        <label>/home/xshell/git/RehtSe/include/radix_tree.hpp</label>
        <link refid="radix_tree.hpp"/>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
      </node>
      <node id="309">
        <label>/home/xshell/git/RehtSe/include/flows/FlowTracker.h</label>
        <link refid="_flow_tracker_8h"/>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
      </node>
      <node id="315">
        <label>/home/xshell/git/RehtSe/src/flows/FlowTracker.cpp</label>
        <link refid="_flow_tracker_8cpp"/>
      </node>
      <node id="312">
        <label>/home/xshell/git/RehtSe/src/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="314">
        <label>/home/xshell/git/RehtSe/src/NFQueue.cpp</label>
        <link refid="_n_f_queue_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classradix__tree" prot="public">radix_tree</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
        </templateparamlist>
        <type>K</type>
        <definition>K radix_substr</definition>
        <argsstring>(const K &amp;key, int begin, int num)</argsstring>
        <name>radix_substr</name>
        <param>
          <type>const K &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xshell/git/RehtSe/include/radix_tree.hpp" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="radix__tree_8hpp_1a52e97a2393f0501d22bee9d7055ba62b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string radix_substr&lt; std::string &gt;</definition>
        <argsstring>(const std::string &amp;key, int begin, int num)</argsstring>
        <name>radix_substr&lt; std::string &gt;</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xshell/git/RehtSe/include/radix_tree.hpp" line="16" column="1" bodyfile="/home/xshell/git/RehtSe/include/radix_tree.hpp" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="radix__tree_8hpp_1a6f3470047bb909a755d9c99fcc97fab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
        </templateparamlist>
        <type>K</type>
        <definition>K radix_join</definition>
        <argsstring>(const K &amp;key1, const K &amp;key2)</argsstring>
        <name>radix_join</name>
        <param>
          <type>const K &amp;</type>
          <declname>key1</declname>
        </param>
        <param>
          <type>const K &amp;</type>
          <declname>key2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xshell/git/RehtSe/include/radix_tree.hpp" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="radix__tree_8hpp_1a78977b52504471dd8bc470f666fb83e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string radix_join&lt; std::string &gt;</definition>
        <argsstring>(const std::string &amp;key1, const std::string &amp;key2)</argsstring>
        <name>radix_join&lt; std::string &gt;</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xshell/git/RehtSe/include/radix_tree.hpp" line="25" column="1" bodyfile="/home/xshell/git/RehtSe/include/radix_tree.hpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="radix__tree_8hpp_1a970b86fa7ee4c36bb1c1895c24b9a218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int radix_length</definition>
        <argsstring>(const K &amp;key)</argsstring>
        <name>radix_length</name>
        <param>
          <type>const K &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xshell/git/RehtSe/include/radix_tree.hpp" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="radix__tree_8hpp_1a1beb7f6a3f758b93834f1fabaed3a135" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int radix_length&lt; std::string &gt;</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>radix_length&lt; std::string &gt;</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xshell/git/RehtSe/include/radix_tree.hpp" line="34" column="1" bodyfile="/home/xshell/git/RehtSe/include/radix_tree.hpp" bodystart="34" bodyend="37"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>RADIX_TREE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RADIX_TREE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="radix__tree__it_8hpp" kindref="compound">radix_tree_it.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="radix__tree__node_8hpp" kindref="compound">radix_tree_node.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K&gt;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">K<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="16" refid="radix__tree_8hpp_1a52e97a2393f0501d22bee9d7055ba62b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>radix_substr&lt;std::string&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key.substr(begin,<sp/>num);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K&gt;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">K<sp/><ref refid="radix__tree_8hpp_1a6f3470047bb909a755d9c99fcc97fab5" kindref="member">radix_join</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key2);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="25" refid="radix__tree_8hpp_1a78977b52504471dd8bc470f666fb83e9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>radix_join&lt;std::string&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key2)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key1<sp/>+<sp/>key2;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K&gt;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="radix__tree_8hpp_1a970b86fa7ee4c36bb1c1895c24b9a218" kindref="member">radix_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="34" refid="radix__tree_8hpp_1a1beb7f6a3f758b93834f1fabaed3a135" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radix_length&lt;std::string&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key.size();</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="40" refid="classradix__tree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classradix__tree" kindref="compound">radix_tree</ref><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="42" refid="classradix__tree_1a9c91791a795ceee58a0c691a46956e8a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>K<sp/><ref refid="classradix__tree_1a9c91791a795ceee58a0c691a46956e8a" kindref="member">key_type</ref>;</highlight></codeline>
<codeline lineno="43" refid="classradix__tree_1a08a4d9146274d8f166604a9ba670227d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classradix__tree_1a08a4d9146274d8f166604a9ba670227d" kindref="member">mapped_type</ref>;</highlight></codeline>
<codeline lineno="44" refid="classradix__tree_1a6053e1b2ccac54f990d6377a1797ebc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>K,<sp/>T&gt;<sp/><ref refid="classradix__tree_1a6053e1b2ccac54f990d6377a1797ebc8" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="45" refid="classradix__tree_1a820fe40af6049993760c529e918c5575" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__it" kindref="compound">radix_tree_it&lt;K, T&gt;</ref><sp/><sp/><sp/><ref refid="classradix__tree_1a820fe40af6049993760c529e918c5575" kindref="member">iterator</ref>;</highlight></codeline>
<codeline lineno="46" refid="classradix__tree_1a67d23e7c48875261141f6259ade40749" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::size_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classradix__tree_1a67d23e7c48875261141f6259ade40749" kindref="member">size_type</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classradix__tree_1af48f519c2190b3ca6762a2d8d4bb0fb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree_1af48f519c2190b3ca6762a2d8d4bb0fb8" kindref="member">radix_tree</ref>()<sp/>:<sp/>m_size(0),<sp/>m_root(NULL)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="49" refid="classradix__tree_1a2bb7871a53afe5f826b3ab77fe039075" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree_1a2bb7871a53afe5f826b3ab77fe039075" kindref="member">~radix_tree</ref>()<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_root;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classradix__tree_1aaf72ee1826a0ace064ed5f1d62f10aff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/><ref refid="classradix__tree_1aaf72ee1826a0ace064ed5f1d62f10aff" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56" refid="classradix__tree_1ad4cdb29807c357f41ead6a4da8fd0666" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1ad4cdb29807c357f41ead6a4da8fd0666" kindref="member">empty</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59" refid="classradix__tree_1a6c1152cdbae47781da0f9939f32760c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a6c1152cdbae47781da0f9939f32760c4" kindref="member">clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_root;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_root<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/><ref refid="classradix__tree_1ac81a340d1ba443a074dfcb6cd94e10ae" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/><ref refid="classradix__tree_1a21d97262afed8dc8bed0d1f1059a9c5e" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/><ref refid="classradix__tree_1ae4f5d38cb6294fbf194eea9083fb653c" kindref="member">end</ref>();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;iterator,<sp/>bool&gt;<sp/><ref refid="classradix__tree_1a6f13485d5e3091ba26fe0b51cfd49f0a" kindref="member">insert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>&amp;val);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a0cb893a83d6178476627810ae753a0a2" kindref="member">erase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a0cb893a83d6178476627810ae753a0a2" kindref="member">erase</ref>(iterator<sp/>it);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a819af474517e7398ba61c0f72e4fa545" kindref="member">prefix_match</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key,<sp/>std::vector&lt;iterator&gt;<sp/>&amp;vec);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a7fb4e244818ad60f4bbf936533ba18e1" kindref="member">greedy_match</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key,<sp/><sp/>std::vector&lt;iterator&gt;<sp/>&amp;vec);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/><ref refid="classradix__tree_1a65818f8ce51e27448a8afd47971e984e" kindref="member">longest_match</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>T&amp;<sp/><ref refid="classradix__tree_1ae66624c974244381c917486275b47738" kindref="member">operator[] </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;lhs);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>m_size;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>*<sp/>m_root;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>*<sp/><ref refid="classradix__tree_1a21d97262afed8dc8bed0d1f1059a9c5e" kindref="member">begin</ref>(<ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>*<sp/>find_node(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key,<sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>*<sp/>append(<ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*parent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>&amp;val);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>*<sp/>prepend(<ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>&amp;val);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a7fb4e244818ad60f4bbf936533ba18e1" kindref="member">greedy_match</ref>(<ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node,<sp/>std::vector&lt;iterator&gt;<sp/>&amp;vec);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree_1af48f519c2190b3ca6762a2d8d4bb0fb8" kindref="member">radix_tree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classradix__tree" kindref="compound">radix_tree</ref>&amp;<sp/>other);<sp/></highlight><highlight class="comment">//<sp/>delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree" kindref="compound">radix_tree</ref>&amp;<sp/>operator<sp/>=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classradix__tree" kindref="compound">radix_tree</ref><sp/>other);<sp/></highlight><highlight class="comment">//<sp/>delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="93" refid="classradix__tree_1a819af474517e7398ba61c0f72e4fa545" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a819af474517e7398ba61c0f72e4fa545" kindref="member">radix_tree&lt;K, T&gt;::prefix_match</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key,<sp/>std::vector&lt;iterator&gt;<sp/>&amp;vec)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>vec.clear();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_root<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>K<sp/>key_sub1,<sp/>key_sub2;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>find_node(key,<sp/>m_root,<sp/>0);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;m_is_leaf)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;m_parent;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/><ref refid="radix__tree_8hpp_1a970b86fa7ee4c36bb1c1895c24b9a218" kindref="member">radix_length</ref>(key)<sp/>-<sp/>node-&gt;m_depth;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>key_sub1<sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(key,<sp/>node-&gt;m_depth,<sp/>len);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>key_sub2<sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(node-&gt;m_key,<sp/>0,<sp/>len);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key_sub1<sp/>!=<sp/>key_sub2)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree_1a7fb4e244818ad60f4bbf936533ba18e1" kindref="member">greedy_match</ref>(node,<sp/>vec);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="119" refid="classradix__tree_1a65818f8ce51e27448a8afd47971e984e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__it" kindref="compound">radix_tree&lt;K, T&gt;::iterator</ref><sp/><ref refid="classradix__tree_1a65818f8ce51e27448a8afd47971e984e" kindref="member">radix_tree&lt;K, T&gt;::longest_match</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_root<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a820fe40af6049993760c529e918c5575" kindref="member">iterator</ref>(NULL);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>K<sp/>key_sub;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>find_node(key,<sp/>m_root,<sp/>0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;m_is_leaf)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a820fe40af6049993760c529e918c5575" kindref="member">iterator</ref>(node);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>key_sub<sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(key,<sp/>node-&gt;m_depth,<sp/><ref refid="radix__tree_8hpp_1a970b86fa7ee4c36bb1c1895c24b9a218" kindref="member">radix_length</ref>(node-&gt;m_key));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(key_sub<sp/>==<sp/>node-&gt;m_key))</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;m_parent;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>K<sp/>nul<sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(key,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>radix_tree_node&lt;K,<sp/>T&gt;::it_child<sp/>it;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>node-&gt;m_children.find(nul);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>node-&gt;m_children.end()<sp/>&amp;&amp;<sp/>it-&gt;second-&gt;m_is_leaf)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a820fe40af6049993760c529e918c5575" kindref="member">iterator</ref>(it-&gt;second);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;m_parent;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a820fe40af6049993760c529e918c5575" kindref="member">iterator</ref>(NULL);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="153" refid="classradix__tree_1ae4f5d38cb6294fbf194eea9083fb653c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__it" kindref="compound">radix_tree&lt;K, T&gt;::iterator</ref><sp/><ref refid="classradix__tree_1ae4f5d38cb6294fbf194eea9083fb653c" kindref="member">radix_tree&lt;K, T&gt;::end</ref>()</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a820fe40af6049993760c529e918c5575" kindref="member">iterator</ref>(NULL);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="159" refid="classradix__tree_1a21d97262afed8dc8bed0d1f1059a9c5e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__it" kindref="compound">radix_tree&lt;K, T&gt;::iterator</ref><sp/><ref refid="classradix__tree_1a21d97262afed8dc8bed0d1f1059a9c5e" kindref="member">radix_tree&lt;K, T&gt;::begin</ref>()</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_root<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="classradix__tree_1a21d97262afed8dc8bed0d1f1059a9c5e" kindref="member">begin</ref>(m_root);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a820fe40af6049993760c529e918c5575" kindref="member">iterator</ref>(node);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>*<sp/><ref refid="classradix__tree_1a21d97262afed8dc8bed0d1f1059a9c5e" kindref="member">radix_tree&lt;K, T&gt;::begin</ref>(<ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;m_is_leaf)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!node-&gt;m_children.empty());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a21d97262afed8dc8bed0d1f1059a9c5e" kindref="member">begin</ref>(node-&gt;m_children.begin()-&gt;second);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="183" refid="classradix__tree_1ae66624c974244381c917486275b47738" refkind="member"><highlight class="normal">T&amp;<sp/><ref refid="classradix__tree_1ae66624c974244381c917486275b47738" kindref="member">radix_tree&lt;K, T&gt;::operator[] </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;lhs)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__it" kindref="compound">iterator</ref><sp/>it<sp/>=<sp/><ref refid="classradix__tree_1ac81a340d1ba443a074dfcb6cd94e10ae" kindref="member">find</ref>(lhs);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/><ref refid="classradix__tree_1ae4f5d38cb6294fbf194eea9083fb653c" kindref="member">end</ref>())<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;K,<sp/>T&gt;<sp/>val;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val.first<sp/>=<sp/>lhs;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;iterator,<sp/>bool&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="classradix__tree_1a6f13485d5e3091ba26fe0b51cfd49f0a" kindref="member">insert</ref>(val);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(ret.second<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>ret.first;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="203" refid="classradix__tree_1a7fb4e244818ad60f4bbf936533ba18e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a7fb4e244818ad60f4bbf936533ba18e1" kindref="member">radix_tree&lt;K, T&gt;::greedy_match</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key,<sp/>std::vector&lt;iterator&gt;<sp/>&amp;vec)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>vec.clear();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_root<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>find_node(key,<sp/>m_root,<sp/>0);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;m_is_leaf)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;m_parent;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree_1a7fb4e244818ad60f4bbf936533ba18e1" kindref="member">greedy_match</ref>(node,<sp/>vec);</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a7fb4e244818ad60f4bbf936533ba18e1" kindref="member">radix_tree&lt;K, T&gt;::greedy_match</ref>(<ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node,<sp/>std::vector&lt;iterator&gt;<sp/>&amp;vec)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;m_is_leaf)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec.push_back(<ref refid="classradix__tree_1a820fe40af6049993760c529e918c5575" kindref="member">iterator</ref>(node));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::map&lt;K,<sp/>radix_tree_node&lt;K,<sp/>T&gt;*&gt;<ref refid="classradix__tree__it" kindref="compound">::iterator</ref><sp/>it;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>node-&gt;m_children.begin();<sp/>it<sp/>!=<sp/>node-&gt;m_children.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classradix__tree_1a7fb4e244818ad60f4bbf936533ba18e1" kindref="member">greedy_match</ref>(it-&gt;second,<sp/>vec);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="236" refid="classradix__tree_1a6214bf995a2f7cc3a8bd2be38bc381eb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a0cb893a83d6178476627810ae753a0a2" kindref="member">radix_tree&lt;K, T&gt;::erase</ref>(<ref refid="classradix__tree__it" kindref="compound">iterator</ref><sp/>it)</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree_1a0cb893a83d6178476627810ae753a0a2" kindref="member">erase</ref>(it-&gt;first);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="242" refid="classradix__tree_1a0cb893a83d6178476627810ae753a0a2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a0cb893a83d6178476627810ae753a0a2" kindref="member">radix_tree&lt;K, T&gt;::erase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_root<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*child;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*parent;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*grandparent;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>K<sp/>nul<sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(key,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>child<sp/>=<sp/>find_node(key,<sp/>m_root,<sp/>0);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>child-&gt;m_is_leaf)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>child-&gt;m_parent;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;m_children.erase(nul);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>child;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>m_size--;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent<sp/>==<sp/>m_root)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent-&gt;m_children.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent-&gt;m_children.empty())<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grandparent<sp/>=<sp/>parent-&gt;m_parent;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grandparent-&gt;m_children.erase(parent-&gt;m_key);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parent;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grandparent<sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grandparent<sp/>==<sp/>m_root)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grandparent-&gt;m_children.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>grandparent<sp/>with<sp/>the<sp/>uncle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::map&lt;K,<sp/>radix_tree_node&lt;K,<sp/>T&gt;*&gt;<ref refid="classradix__tree__it" kindref="compound">::iterator</ref><sp/>it;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>grandparent-&gt;m_children.begin();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*uncle<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uncle-&gt;m_is_leaf)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncle-&gt;m_depth<sp/>=<sp/>grandparent-&gt;m_depth;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncle-&gt;m_key<sp/><sp/><sp/>=<sp/><ref refid="radix__tree_8hpp_1a6f3470047bb909a755d9c99fcc97fab5" kindref="member">radix_join</ref>(grandparent-&gt;m_key,<sp/>uncle-&gt;m_key);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncle-&gt;m_parent<sp/>=<sp/>grandparent-&gt;m_parent;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grandparent-&gt;m_children.erase(it);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grandparent-&gt;m_parent-&gt;m_children.erase(grandparent-&gt;m_key);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grandparent-&gt;m_parent-&gt;m_children[uncle-&gt;m_key]<sp/>=<sp/>uncle;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>grandparent;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>*<sp/><ref refid="classradix__tree" kindref="compound">radix_tree&lt;K, T&gt;::append</ref>(<ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*parent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a6053e1b2ccac54f990d6377a1797ebc8" kindref="member">value_type</ref><sp/>&amp;val)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>K<sp/><sp/><sp/>nul<sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(val.first,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node_c,<sp/>*node_cc;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>depth<sp/>=<sp/>parent-&gt;m_depth<sp/>+<sp/><ref refid="radix__tree_8hpp_1a970b86fa7ee4c36bb1c1895c24b9a218" kindref="member">radix_length</ref>(parent-&gt;m_key);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/><sp/><sp/>=<sp/><ref refid="radix__tree_8hpp_1a970b86fa7ee4c36bb1c1895c24b9a218" kindref="member">radix_length</ref>(val.first)<sp/>-<sp/>depth;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>(val);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_depth<sp/><sp/><sp/>=<sp/>depth;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_parent<sp/><sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_key<sp/><sp/><sp/><sp/><sp/>=<sp/>nul;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_is_leaf<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;m_children[nul]<sp/>=<sp/>node_c;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_c;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>(val);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K<sp/>key_sub<sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(val.first,<sp/>depth,<sp/>len);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;m_children[key_sub]<sp/>=<sp/>node_c;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_depth<sp/><sp/>=<sp/>depth;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_parent<sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_key<sp/><sp/><sp/><sp/>=<sp/>key_sub;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_cc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>(val);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_children[nul]<sp/>=<sp/>node_cc;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_cc-&gt;m_depth<sp/><sp/><sp/>=<sp/>depth<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_cc-&gt;m_parent<sp/><sp/>=<sp/>node_c;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_cc-&gt;m_key<sp/><sp/><sp/><sp/><sp/>=<sp/>nul;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_cc-&gt;m_is_leaf<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_cc;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>*<sp/><ref refid="classradix__tree" kindref="compound">radix_tree&lt;K, T&gt;::prepend</ref>(<ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a6053e1b2ccac54f990d6377a1797ebc8" kindref="member">value_type</ref><sp/>&amp;val)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len1,<sp/>len2;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>len1<sp/>=<sp/><ref refid="radix__tree_8hpp_1a970b86fa7ee4c36bb1c1895c24b9a218" kindref="member">radix_length</ref>(node-&gt;m_key);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>len2<sp/>=<sp/><ref refid="radix__tree_8hpp_1a970b86fa7ee4c36bb1c1895c24b9a218" kindref="member">radix_length</ref>(val.first)<sp/>-<sp/>node-&gt;m_depth;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(count<sp/>=<sp/>0;<sp/>count<sp/>&lt;<sp/>len1<sp/>&amp;&amp;<sp/>count<sp/>&lt;<sp/>len2;<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(node-&gt;m_key[count]<sp/>==<sp/>val.first[count<sp/>+<sp/>node-&gt;m_depth])<sp/>)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(count<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;m_parent-&gt;m_children.erase(node-&gt;m_key);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node_a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>node_a-&gt;m_parent<sp/>=<sp/>node-&gt;m_parent;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>node_a-&gt;m_key<sp/><sp/><sp/><sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(node-&gt;m_key,<sp/>0,<sp/>count);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>node_a-&gt;m_depth<sp/><sp/>=<sp/>node-&gt;m_depth;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>node_a-&gt;m_parent-&gt;m_children[node_a-&gt;m_key]<sp/>=<sp/>node_a;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;m_depth<sp/><sp/>+=<sp/>count;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;m_parent<sp/><sp/>=<sp/>node_a;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;m_key<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(node-&gt;m_key,<sp/>count,<sp/>len1<sp/>-<sp/>count);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;m_parent-&gt;m_children[node-&gt;m_key]<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>K<sp/>nul<sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(val.first,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>len2)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node_b;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_b<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>(val);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_b-&gt;m_parent<sp/><sp/>=<sp/>node_a;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_b-&gt;m_key<sp/><sp/><sp/><sp/><sp/>=<sp/>nul;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_b-&gt;m_depth<sp/><sp/><sp/>=<sp/>node_a-&gt;m_depth<sp/>+<sp/>count;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_b-&gt;m_is_leaf<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_b-&gt;m_parent-&gt;m_children[nul]<sp/>=<sp/>node_b;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_b;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node_b,<sp/>*node_c;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_b<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_b-&gt;m_parent<sp/>=<sp/>node_a;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_b-&gt;m_depth<sp/><sp/>=<sp/>node-&gt;m_depth;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_b-&gt;m_key<sp/><sp/><sp/><sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(val.first,<sp/>node_b-&gt;m_depth,<sp/>len2<sp/>-<sp/>count);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_b-&gt;m_parent-&gt;m_children[node_b-&gt;m_key]<sp/>=<sp/>node_b;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>(val);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_parent<sp/><sp/>=<sp/>node_b;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_depth<sp/><sp/><sp/>=<sp/><ref refid="radix__tree_8hpp_1a970b86fa7ee4c36bb1c1895c24b9a218" kindref="member">radix_length</ref>(val.first);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_key<sp/><sp/><sp/><sp/><sp/>=<sp/>nul;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_is_leaf<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_c-&gt;m_parent-&gt;m_children[nul]<sp/>=<sp/>node_c;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_c;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="421" refid="classradix__tree_1a6f13485d5e3091ba26fe0b51cfd49f0a" refkind="member"><highlight class="normal">std::pair&lt;typename<sp/>radix_tree&lt;K,<sp/>T&gt;::iterator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;<sp/><ref refid="classradix__tree_1a6f13485d5e3091ba26fe0b51cfd49f0a" kindref="member">radix_tree&lt;K, T&gt;::insert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a6053e1b2ccac54f990d6377a1797ebc8" kindref="member">value_type</ref><sp/>&amp;val)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_root<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K<sp/>nul<sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(val.first,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_root<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_root-&gt;m_key<sp/>=<sp/>nul;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node<sp/>=<sp/>find_node(val.first,<sp/>m_root,<sp/>0);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;m_is_leaf)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pair&lt;iterator,<sp/>bool&gt;(node,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>m_root)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_size++;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pair&lt;iterator,<sp/>bool&gt;(append(m_root,<sp/>val),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_size++;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="radix__tree_8hpp_1a970b86fa7ee4c36bb1c1895c24b9a218" kindref="member">radix_length</ref>(node-&gt;m_key);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K<sp/><sp/><sp/>key_sub<sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(val.first,<sp/>node-&gt;m_depth,<sp/>len);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key_sub<sp/>==<sp/>node-&gt;m_key)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pair&lt;iterator,<sp/>bool&gt;(append(node,<sp/>val),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pair&lt;iterator,<sp/>bool&gt;(prepend(node,<sp/>val),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="452" refid="classradix__tree_1ac81a340d1ba443a074dfcb6cd94e10ae" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classradix__tree__it" kindref="compound">radix_tree&lt;K, T&gt;::iterator</ref><sp/><ref refid="classradix__tree_1ac81a340d1ba443a074dfcb6cd94e10ae" kindref="member">radix_tree&lt;K, T&gt;::find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_root<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a820fe40af6049993760c529e918c5575" kindref="member">iterator</ref>(NULL);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node<sp/>=<sp/>find_node(key,<sp/>m_root,<sp/>0);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>node<sp/>is<sp/>a<sp/>internal<sp/>node,<sp/>return<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>node-&gt;m_is_leaf)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a820fe40af6049993760c529e918c5575" kindref="member">iterator</ref>(NULL);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classradix__tree_1a820fe40af6049993760c529e918c5575" kindref="member">iterator</ref>(node);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref>*<sp/><ref refid="classradix__tree" kindref="compound">radix_tree&lt;K, T&gt;::find_node</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key,<sp/><ref refid="classradix__tree__node" kindref="compound">radix_tree_node&lt;K, T&gt;</ref><sp/>*node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;m_children.empty())</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>radix_tree_node&lt;K,<sp/>T&gt;::it_child<sp/>it;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len_key<sp/>=<sp/><ref refid="radix__tree_8hpp_1a970b86fa7ee4c36bb1c1895c24b9a218" kindref="member">radix_length</ref>(key)<sp/>-<sp/>depth;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>node-&gt;m_children.begin();<sp/>it<sp/>!=<sp/>node-&gt;m_children.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len_key<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second-&gt;m_is_leaf)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>it-&gt;second-&gt;m_is_leaf<sp/>&amp;&amp;<sp/>key[depth]<sp/>==<sp/>it-&gt;first[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len_node<sp/>=<sp/><ref refid="radix__tree_8hpp_1a970b86fa7ee4c36bb1c1895c24b9a218" kindref="member">radix_length</ref>(it-&gt;first);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K<sp/><sp/><sp/>key_sub<sp/><sp/>=<sp/><ref refid="radix__tree_8hpp_1a0da9917b249b72630281a390c624ffdf" kindref="member">radix_substr</ref>(key,<sp/>depth,<sp/>len_node);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key_sub<sp/>==<sp/>it-&gt;first)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_node(key,<sp/>it-&gt;second,<sp/>depth+len_node);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="499"><highlight class="comment"></highlight></codeline>
<codeline lineno="500"><highlight class="comment">(root)</highlight></codeline>
<codeline lineno="501"><highlight class="comment">|</highlight></codeline>
<codeline lineno="502"><highlight class="comment">|---------------</highlight></codeline>
<codeline lineno="503"><highlight class="comment">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="504"><highlight class="comment">abcde<sp/><sp/><sp/>bcdef<sp/><sp/>c</highlight></codeline>
<codeline lineno="505"><highlight class="comment">|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>|------</highlight></codeline>
<codeline lineno="506"><highlight class="comment">|<sp/><sp/><sp/>|<sp/><sp/><sp/>$3<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>|<sp/><sp/>|</highlight></codeline>
<codeline lineno="507"><highlight class="comment">f<sp/><sp/><sp/>ge<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/><sp/>e<sp/><sp/>$6</highlight></codeline>
<codeline lineno="508"><highlight class="comment">|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>|</highlight></codeline>
<codeline lineno="509"><highlight class="comment">$1<sp/><sp/>$2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>$4<sp/>$5</highlight></codeline>
<codeline lineno="510"><highlight class="comment"></highlight></codeline>
<codeline lineno="511"><highlight class="comment">find_node():</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/>bcdef<sp/><sp/>-&gt;<sp/>$3</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/>bcdefa<sp/>-&gt;<sp/>bcdef</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/>c<sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>$6</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/><sp/>cf<sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>c</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/><sp/>abch<sp/><sp/><sp/>-&gt;<sp/>abcde</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/><sp/>abc<sp/><sp/><sp/><sp/>-&gt;<sp/>abcde</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/>abcde<sp/><sp/>-&gt;<sp/>abcde</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/>abcdef<sp/>-&gt;<sp/>$1</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/>abcdeh<sp/>-&gt;<sp/>abcde</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/>de<sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>(root)</highlight></codeline>
<codeline lineno="522"><highlight class="comment"></highlight></codeline>
<codeline lineno="523"><highlight class="comment"></highlight></codeline>
<codeline lineno="524"><highlight class="comment">(root)</highlight></codeline>
<codeline lineno="525"><highlight class="comment">|</highlight></codeline>
<codeline lineno="526"><highlight class="comment">abcd</highlight></codeline>
<codeline lineno="527"><highlight class="comment">|</highlight></codeline>
<codeline lineno="528"><highlight class="comment">$</highlight></codeline>
<codeline lineno="529"><highlight class="comment"></highlight></codeline>
<codeline lineno="530"><highlight class="comment">(root)</highlight></codeline>
<codeline lineno="531"><highlight class="comment">|</highlight></codeline>
<codeline lineno="532"><highlight class="comment">$</highlight></codeline>
<codeline lineno="533"><highlight class="comment"></highlight></codeline>
<codeline lineno="534"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>RADIX_TREE_HPP</highlight></codeline>
    </programlisting>
    <location file="/home/xshell/git/RehtSe/include/radix_tree.hpp"/>
  </compounddef>
</doxygen>
