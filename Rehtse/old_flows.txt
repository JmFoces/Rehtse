void Flow::add_data(char* new_data,uint16_t len){
	BOOST_LOG_TRIVIAL(debug) << "Adding data ";
	last_offset = data.size();
	data.append(new_data,len);
}
void Flow::add_data(std::string new_data){
	BOOST_LOG_TRIVIAL(debug) << "Adding data ";
	last_offset = data.size();
	data.append(new_data);
}
bool Flow::matches(std::string regex){
	BOOST_LOG_TRIVIAL(trace) << "Matching data ";

	boost::regex re(regex);
	boost::match_results<std::string::const_iterator> what;
	std::string::const_iterator start, end;
	boost::match_flag_type flags = boost::match_all;
	BOOST_LOG_TRIVIAL(trace)
		<< "Flow "
		<< hexa_print(key.c_str(),key.size())
		<<"data: "
		<< hexa_print(data.c_str(),data.size());

	start = data.begin() ;
	end = data.end();

	if (boost::regex_search(start,end,what,re,flags)){
		BOOST_LOG_TRIVIAL(debug) << "Packet MAtches " << what.length();
		return true;
	}
	else{
		return false;
	}
}

void Flow::modify(Crafter::Packet &packet_obj,boost::regex regex){
	Crafter::Layer* last_layer = packet_obj[packet_obj.GetLayerCount()-1];
	std::string payload = last_layer->GetStringPayload();

	std::ostringstream t(std::ios::out | std::ios::binary);
	std::ostream_iterator<char, char> oi(t);
	std::string repl = "adios";
	//boost::regex_replace(oi, payload.begin(),payload.end(),regex, format, boost::match_default | boost::format_all);
	std::string payload_mod =  boost::regex_replace(
		payload,boost::regex(regex),
		repl,boost::match_default | boost::format_first_only
	);
	last_layer->SetPayload((unsigned char*)payload_mod.c_str(),payload_mod.size());
	packet_obj.PreCraft();

}

--------------Flow:tracker handle_packet
/* Flow* s_flow = getFlow(key_pair.first);
	 * Flow* d_flow = getFlow(key_pair.second);
	 * s_flow->setBrother(d_flow);
	 * d_flow->setBrother(s_flow);
	 * size_t layer_count = packet->GetLayerCount();
	 * Crafter::RawLayer *data_layer  = (Crafter::RawLayer*)packet->operator [](layer_count-1);
	 * BOOST_LOG_TRIVIAL(trace) << data_layer->GetName() << "  Got data layer at "  << layer_count-1 << " PTR " << data_layer;
	 * std::string data = data_layer->GetPayload().GetString();
	 * s_flow->add_data(data);
	 */