Code Sampes

uint32_t id = 0;

	nfqnl_msg_packet_hdr *header;

	if ((header = nfq_get_msg_packet_hdr(nfq_data))) {
		id = ntohl(header->packet_id);
	}

	unsigned char *pktData;
	int len = nfq_get_payload(nfq_data, &pktData);


	//Decoding
	BOOST_LOG_TRIVIAL(trace) <<  "Packet: "<< hexa_print((unsigned char *)pktData,len);
	Crafter::Packet packet_obj((uint8_t*)pktData,len,Crafter::IP::PROTO);
	std::stringstream ss;
	packet_obj.Print(ss);
	BOOST_LOG_TRIVIAL(debug) << "DECODED Packet "<< ss.str();

	//Get last layer
	size_t layers = packet_obj.GetLayerCount();

	ss.flush();
	ss.clear();
	ss.str(std::string());
	Crafter::Layer *last_layer = packet_obj[layers-1];

	//last_layer->Print(ss);
	//last_layer->RawString(ss);
	//BOOST_LOG_TRIVIAL(debug) << "Last Layer "<< ss.str();

	uint8_t *data= (uint8_t*)malloc(400);
	last_layer->GetRawData(data);
	std::string str = last_layer->GetStringPayload();
	BOOST_LOG_TRIVIAL(debug) << "Last Layer "<< hexa_print((unsigned char*)str.c_str(),400);
	//Regex match
	boost::cmatch match;
	boost::regex re(".*hola.*");
	boost::match_results<std::string::const_iterator> what;
	std::string::const_iterator start, end;
	boost::match_flag_type flags = boost::match_all;
	start = str.begin();
	end = str.end();
	if (boost::regex_search(start,end,what,re,flags)){
		BOOST_LOG_TRIVIAL(debug) << "Packet MAtches";

	}



